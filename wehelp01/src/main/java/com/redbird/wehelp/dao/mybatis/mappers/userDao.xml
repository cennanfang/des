<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="com.redbird.wehelp.dao.UserDao">
	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		resultType="com.redbird.wehelp.pojo.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 -->
	<!-- 根据id查询得到一个user对象 -->
	<select id="find" parameterType="int" resultMap="findUserResult">
		select * from w_user u where id=#{id}
	</select>

	<select id="findByUserName" parameterType="String" resultMap="findUserResult">
		select * from w_user where user_name=#{userName}
	</select>
	
	<resultMap type="com.redbird.wehelp.pojo.User" id="findUserResult">
		<id property="id" column="id" />
		<result property="userName" column="user_name" />
		<result property="password" column="password" />
		<result property="salt" column="salt" />
		<result property="locked" column="locked" />
		<result property="nickName" column="nick_name" />
		<result property="sex" column="sex" />
		<result property="age" column="age" />
		<result property="phone" column="phone" />
		<result property="email" column="email" />
		<result property="address" column="address" />
		<result property="registerDate" column="register_date" />
	</resultMap>

	<insert id="add" parameterType="com.redbird.wehelp.pojo.User"
		flushCache="true">
		INSERT INTO w_user ( user_name, password, salt, locked, nick_name, sex, age, phone, email,
		address)
		VALUES
		(#{userName},#{password},#{salt},#{locked},#{nickName},#{sex},#{age},#{phone},#{email},#{address})
	</insert>

	<update id="update" parameterType="com.redbird.wehelp.pojo.User">
		UPDATE w_user SET user_name=#{userName}, password=#{password}, salt=#{salt}, locked=#{locked}
		nick_name=#{nickName}, sex=#{sex},
		age=#{age}, phone=#{phone}, email=#{email}, address=#{address} WHERE id=#{id}
	</update>
	<delete id="delete" parameterType="int">
		DELETE FROM w_user WHERE id=#{id}
	</delete>
</mapper>